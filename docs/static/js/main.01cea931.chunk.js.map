{"version":3,"sources":["Navbar.js","state/state-context.js","helper/judges.js","helper/judges/atcoder.js","helper/judges/codeforces.js","helper/get-data.js","Problem.js","ProblemList.js","Options.js","Help.js","App.js","state/state-provider.js","index.js"],"names":["AppNavbar","Navbar","id","fixed","variant","expand","style","backgroundColor","Brand","href","Toggle","Collapse","Nav","Link","StateContext","React","createContext","Judges","name","abbr","getAtcoderData","problemId","type","a","async","toLowerCase","fetch","request","json","api","clipDifficulty","difficulty","Math","round","exp","toFixed","entry","predict","title","replace","contest_id","CODEFORCES_CACHE_ID","getCodeforcesData","toUpperCase","sessionStorage","getItem","text","response","JSON","parse","setItem","result","problems","contestId","toString","index","rating","getData","judge","Problem","problem","state","useContext","useState","isEdit","setEdit","onPropChange","prop","event","slice","stringify","target","value","set","desc","options","showAbbreviation","Card","Body","padding","Title","marginBottom","url","showDifficulty","onClick","promises","push","then","data","Promise","all","results","propName","propValue","icon","faCheck","faEdit","cursor","filter","faTrashAlt","Text","className","width","Form","Control","as","size","onChange","Object","entries","map","placeholder","ProblemList","Button","concat","key","Options","downloadString","filename","string","blob","Blob","URL","createObjectURL","anchor","document","createElement","download","click","revokeObjectURL","onOptionToggled","option","Check","checked","label","input","addEventListener","file","files","reader","FileReader","onload","Alertify","success","e","error","readAsText","line","join","sort","b","Help","App","Container","marginTop","LOCAL_STORAGE_ID","INITIAL_STATE","ReactDOM","render","children","initialState","window","localStorage","setState","useEffect","Provider","delta","getElementById"],"mappings":"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","file":"static/js/main.01cea931.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/nav';\n\nexport default function AppNavbar() {\n  return (\n    <Navbar id=\"navbar\" fixed='top' variant='dark' expand='lg' style={{ backgroundColor: '#203527' }}>\n      <Navbar.Brand href='#'>CP Problems</Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse id='navbar-nav'>\n        <Nav>\n          <Nav.Link href='#list'>List</Nav.Link>\n          <Nav.Link href='#options'>Options</Nav.Link>\n          <Nav.Link href='#help'>Help</Nav.Link>\n          <Nav.Link href='https://github.com/southball/cp-problems/'>GitHub</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n","import React from 'react';\n\nconst StateContext = React.createContext(null);\n\nexport default StateContext;\n","export const Judges = {\n\n  '': {\n    name: 'Not set',\n    abbr: 'N/S'\n  },\n\n  'atcoder': {\n    name: 'AtCoder',\n    abbr: 'AtC'\n  },\n\n  'codeforces': {\n    name: 'Codeforces',\n    abbr: 'CF'\n  }\n\n};","export async function getAtcoderData(problemId, type) {\n  problemId = problemId.toLowerCase();\n\n  if (type === 'difficulty') {\n    // Fetch difficulty from another API.\n    const request = await fetch('https://kenkoooo.com/atcoder/resources/problem-models.json');\n    const api = await request.json();\n\n    // Difficulty smoothing function, taken from kenkoooo/AtCoderProblems.\n    const clipDifficulty = (difficulty) =>\n      Math.round(\n        difficulty >= 400 ? difficulty : 400 / Math.exp(1.0 - difficulty / 400)\n      );\n\n    if (api[problemId]) {\n      return clipDifficulty(api[problemId].difficulty).toFixed();\n    } else {\n      return '-';\n    }\n  } else {\n    const request = await fetch('https://kenkoooo.com/atcoder/resources/merged-problems.json');\n    const api = await request.json();\n\n    for (const entry of api)\n      if (entry.id === problemId) {\n        switch (type) {\n          case 'difficulty':\n            return entry.predict ? entry.predict.toFixed() : '-';\n          case 'name':\n            // Remove the problem index before the title if possible.\n            return entry.title ? entry.title.replace(/^[A-Z]. /, '') : '-';\n          case 'url':\n            return `https://atcoder.jp/contests/${entry.contest_id}/tasks/${entry.id}`;\n          default:\n            return '-';\n        }\n      }\n\n    return '-';\n  }\n}\n","const CODEFORCES_CACHE_ID = 'cp-problems.codeforces-cache';\n\nexport async function getCodeforcesData(problemId, type) {\n  problemId = problemId.toUpperCase();\n\n  let api;\n\n  if (sessionStorage.getItem(CODEFORCES_CACHE_ID) === null) {\n    const request = await fetch('https://codeforces.com/api/problemset.problems');\n    const response = await request.text();\n    api = JSON.parse(response);\n    sessionStorage.setItem(CODEFORCES_CACHE_ID, response);\n  } else {\n    api = JSON.parse(sessionStorage.getItem(CODEFORCES_CACHE_ID));\n  }\n\n  for (const entry of api.result.problems) {\n    if (problemId === entry.contestId.toString() + entry.index) {\n      switch (type) {\n        case 'difficulty':\n          return entry.rating ? entry.rating.toFixed() : '-';\n        case 'name':\n          return entry.name ? entry.name : '-';\n        case 'url':\n          return `https://codeforces.com/problemset/problem/${entry.contestId.toString()}/${entry.index}`;\n        default:\n          return '-';\n      }\n    }\n  }\n\n  return '-';\n}\n","import { getAtcoderData } from './judges/atcoder';\nimport { getCodeforcesData } from './judges/codeforces';\n\nexport async function getData(judge, problemId, type) {\n  if (judge === 'atcoder') {\n    return await getAtcoderData(problemId, type);\n  } else if (judge === 'codeforces') {\n    return await getCodeforcesData(problemId, type);\n  } else {\n    return '-';\n  }\n}\n","import React, { useState, useContext } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport StateContext from './state/state-context';\n\nimport { Judges } from './helper/judges';\nimport { getData } from './helper/get-data';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faCheck, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\nexport default function Problem({ problem, id }) {\n  const state = useContext(StateContext);\n  const [isEdit, setEdit] = useState(problem.judge === '' && problem.problemId === '');\n\n  function onPropChange(prop) {\n    return (event) => {\n      const problems = state.problems.slice();\n      // Clone problem\n      const problem = JSON.parse(JSON.stringify(problems[id]));\n      problem[prop] = event.target.value;\n      problems[id] = problem;\n\n      state.set({ problems });\n    }\n  }\n\n  function toggleEdit() {\n    if (isEdit && problem.judge && problem.problemId) {\n      // Auto fetch required data\n      const promises = [];\n\n      if (problem.name === '') {\n        promises.push(\n          getData(problem.judge, problem.problemId, 'name').then((data) => ['name', data])\n        );\n      }\n\n      if (problem.url === '') {\n        promises.push(\n          getData(problem.judge, problem.problemId, 'url').then((data) => ['url', data])\n        );\n      }\n\n      if (problem.difficulty === '') {\n        promises.push(\n          getData(problem.judge, problem.problemId, 'difficulty').then((data) => ['difficulty', data])\n        );\n      }\n\n      Promise.all(promises).then((results) => {\n        const problems = state.problems.slice();\n        const problem = problems[id];\n\n        for (const [propName, propValue] of results) {\n          problem[propName] = propValue;\n        }\n\n        problems[id] = problem;\n        state.set({ problems });\n      });\n    }\n\n    setEdit(!isEdit);\n  }\n\n  function deleteProblem(event) {\n    const problems = state.problems.filter((problem, index) => index !== id);\n\n    state.set({ problems });\n  }\n\n  const desc = (\n    <>\n      {\n        state.options.showAbbreviation\n          ? Judges[problem.judge].abbr\n          : Judges[problem.judge].name\n      }\n      &nbsp;\n      {problem.problemId}\n      {problem.name !== '' && problem.name !== '-' ? ' - ' + problem.name : ''}\n    </>\n  )\n\n  return (\n    <Card>\n      <Card.Body style={{ padding: '8px 20px' }}>\n        <Card.Title style={{ marginBottom: isEdit ? '12px' : '0px' }}>\n          {problem.url !== '' && problem.url !== '-'\n            ?\n            <a href={problem.url}>\n              {desc}\n            </a>\n            :\n            desc}&nbsp;\n          {state.options.showDifficulty\n            && problem.difficulty !== ''\n            && problem.difficulty !== '-'\n            ? `(${problem.difficulty}) `\n            : ''}\n          <FontAwesomeIcon\n            onClick={toggleEdit}\n            icon={!isEdit ? faEdit : faCheck}\n            style={{ cursor: 'pointer' }} />&nbsp;\n          <FontAwesomeIcon\n            onClick={deleteProblem}\n            icon={faTrashAlt}\n            style={{ cursor: 'pointer' }} />\n        </Card.Title>\n\n        {isEdit && <Card.Text>\n          <table className='w-100'>\n            <tr>\n              <td style={{ width: '100px' }}><b>Judge:</b></td>\n              <td>\n                <Form.Control\n                  as='select'\n                  size='sm'\n                  value={problem.judge}\n                  onChange={onPropChange('judge')}>\n                  {Object.entries(Judges).map(([id, judge]) => (\n                    <option value={id}>{judge.abbr} - {judge.name}</option>\n                  ))}\n                </Form.Control>\n              </td>\n            </tr>\n            <tr>\n              <td style={{ width: '100px' }}><b>Problem ID:</b></td>\n              <td>\n                <Form.Control\n                  size='sm'\n                  value={problem.problemId}\n                  onChange={onPropChange('problemId')} />\n              </td>\n            </tr>\n            <tr>\n              <td style={{ width: '100px' }}><b>Name:</b></td>\n              <td>\n                <Form.Control\n                  size='sm'\n                  value={problem.name}\n                  placeholder='Leave this field blank to fetch automatically.'\n                  onChange={onPropChange('name')} />\n              </td>\n            </tr>\n            <tr>\n              <td style={{ width: '100px' }}><b>URL:</b></td>\n              <td>\n                <Form.Control\n                  size='sm'\n                  value={problem.url}\n                  placeholder='Leave this field blank to fetch automatically.'\n                  onChange={onPropChange('url')} />\n              </td>\n            </tr>\n            <tr>\n              <td style={{ width: '100px' }}><b>Difficulty:</b></td>\n              <td>\n                <Form.Control\n                  size='sm'\n                  value={problem.difficulty}\n                  placeholder='Leave this field blank to fetch automatically.'\n                  onChange={onPropChange('difficulty')} />\n              </td>\n            </tr>\n          </table>\n        </Card.Text>}\n      </Card.Body>\n    </Card>\n  );\n}","import React, { useContext } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport StateContext from './state/state-context';\n\nimport Problem from './Problem';\n\nexport default function ProblemList() {\n  const state = useContext(StateContext);\n\n  function addProblem() {\n    state.set({ problems: state.problems.concat({ judge: '', problemId: '', name: '', url: '', difficulty: '' }) });\n  }\n\n  return (\n    <>\n      <Button variant='dark' onClick={addProblem} style={{ marginBottom: '8px' }}>\n        Add Problem\n      </Button>\n\n      {state.problems.map((problem, id) => (\n        <Problem problem={problem} id={id} key={id} />\n      ))}\n    </>\n  );\n}","import React, { useContext } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport StateContext from './state/state-context';\n\nimport Alertify from 'alertifyjs/build/alertify.min.js';\nimport { Judges } from './helper/judges';\n\nexport default function Options() {\n  const state = useContext(StateContext);\n\n  function importData() {\n    const input = document.createElement('input');\n    input.type = 'file';\n\n    input.addEventListener('change', () => {\n      const file = input.files[0];\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        try {\n          const data = JSON.parse(reader.result);\n          state.set({ problems: data });\n          Alertify.success('Imported data from file.');\n        } catch (e) {\n          Alertify.error('Cannot read the file chosen.');\n        }\n      };\n\n      reader.readAsText(file);\n    });\n\n    input.click();\n  }\n\n  function downloadString(filename, string) {\n    const blob = new Blob([string]);\n    const url = URL.createObjectURL(blob);\n\n    const anchor = document.createElement('a');\n    anchor.href = url;\n    anchor.download = filename;\n    anchor.click();\n\n    URL.revokeObjectURL(url);\n  }\n\n  function exportData() {\n    const json = JSON.stringify(state.problems);\n    downloadString('problems.json', json);\n  }\n\n  function exportMarkdown() {\n    const problems = state.problems.slice();\n    const markdown = problems\n      .map((problem) => {\n        let line = '';\n\n        line += `- [`;\n\n        line += state.options.showAbbreviation\n          ? Judges[problem.judge].abbr\n          : Judges[problem.judge].name;\n\n        line += ` ${problem.problemId}`;\n        if (problem.name !== '' && problem.name !== '-')\n          line += ` - ${problem.name}`;\n        if (state.options.showDifficulty && problem.difficulty !== '' && problem.difficulty !== '-')\n          line += ` (${problem.difficulty})`;\n        line += ']';\n        line += `(${problem.url})`;\n\n        return line;\n      })\n      .join('\\n') + '\\n';\n\n    downloadString('problems.md', markdown);\n  }\n\n  function sortProblems() {\n    const problems = state.problems.slice();\n    problems.sort((a, b) => {\n      if (a.judge !== b.judge) {\n        return a.judge > b.judge;\n      } else if (a.problemId !== b.problemId) {\n        return a.problemId > b.problemId;\n      } else {\n        return 0;\n      }\n    });\n\n    state.set({ problems });\n  }\n\n  function clearAllData() {\n    state.set({ problems: [] });\n  }\n\n  function onOptionToggled(option) {\n    return (event) => {\n      const options = { ...state.options };\n      options[option] = !options[option];\n      state.set({ options });\n    };\n  };\n\n  return (\n    <>\n      <Form.Check\n        checked={state.options.showDifficulty ? 'checked' : ''}\n        onChange={onOptionToggled('showDifficulty')}\n        label='Show Difficulty' />\n      <Form.Check\n        checked={state.options.showAbbreviation ? 'checked' : ''}\n        onChange={onOptionToggled('showAbbreviation')}\n        label='Show Abbreviations of Judge' />\n      <Button variant='dark' onClick={importData}>Import Data (Override)</Button>&nbsp;\n      <Button variant='dark' onClick={exportData}>Export Data</Button>&nbsp;\n      <Button variant='dark' onClick={exportMarkdown}>Export Markdown</Button>&nbsp;\n      <Button variant='dark' onClick={sortProblems}>Sort Problems</Button>&nbsp;\n      <Button variant='dark' onClick={clearAllData}>Clear All Data</Button>\n    </>\n  );\n}","import React from 'react';\n\nexport default function Help() {\n  return (\n    <>\n      <p>\n        This application simplifies the task of creating and editing a\n        list of problems. You only need to enter the judge and the problem\n        ID, and it will automatically fetch the name, URL and difficulty\n        of the problems. You can also import and export your list in JSON,\n        and export your list in Markdown.\n      </p>\n\n      <p>\n        The application currently supports the following judges:&nbsp;\n        <a href=\"https://atcoder.jp/\">AtCoder</a> and&nbsp;\n        <a href=\"https://codeforces.com/\">CodeForces</a>.\n      </p>\n\n      <p>\n        For <b>Codeforces</b>, enter the ID shown in the <code>#</code>&nbsp;\n        field of the problemset page, e.g. <code>20C</code> for&nbsp;\n        <a href=\"https://codeforces.com/problemset/problem/20/C\">Dijkstra</a>.\n      </p>\n\n      <p>\n        For <b>AtCoder</b>, enter the ID in the last part of the URL, e.g.&nbsp;\n        <code>ARC084_B</code> for&nbsp;\n        <a href=\"https://atcoder.jp/contests/arc084/tasks/arc084_b\">Small Multiple</a>.\n      </p>\n    </>\n  )\n}","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from './Navbar';\nimport ProblemList from './ProblemList';\nimport Options from './Options';\nimport Help from './Help';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Navbar />\n      <Container style={{ marginTop: '70px' }}>\n        <h2>\n          <a className='anchor' id='list'></a>\n          Problems List\n        </h2>\n        <ProblemList />\n\n        <hr />\n\n        <h2>\n          <a className='anchor' id='options'></a>\n          Options\n        </h2>\n        <Options />\n\n        <hr />\n\n        <h2>\n          <a className='anchor' id='help'></a>\n          Help\n        </h2>\n        <Help />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport StateContext from './state-context';\n\nconst LOCAL_STORAGE_ID = 'cp-problems.app-state';\nconst INITIAL_STATE = {\n  problems: [],\n  options: {\n    showDifficulty: true,\n    showAbbreviation: true,\n  },\n};\n\nexport default function StateProvider({ children }) {\n  const initialState =\n    JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_ID)) || INITIAL_STATE;\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    window.localStorage.setItem(LOCAL_STORAGE_ID, JSON.stringify(state))\n  }, [state]);\n\n  function partialSetState(delta) {\n    setState({ ...state, ...delta });\n  }\n\n  return (\n    <StateContext.Provider value={{ ...state, set: partialSetState }}>\n      {children}\n    </StateContext.Provider>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport StateProvider from './state/state-provider';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'alertifyjs/build/css/alertify.min.css';\nimport 'alertifyjs/build/css/themes/bootstrap.min.css';\n\nReactDOM.render(\n  (\n    <StateProvider>\n      <App />\n    </StateProvider>\n  ),\n  document.getElementById('root')\n);"],"sourceRoot":""}