{"version":3,"sources":["Navbar.js","state/state-context.js","helper/judges.js","helper/judges/atcoder.js","helper/judges/codeforces.js","helper/get-data.js","Problem.js","ProblemList.js","Options.js","App.js","state/state-provider.js","index.js"],"names":["AppNavbar","Navbar","id","fixed","variant","expand","style","backgroundColor","Brand","href","Toggle","Collapse","Nav","Link","StateContext","React","createContext","Judges","name","abbr","getAtcoderData","problemId","type","a","async","toLowerCase","fetch","request","json","api","clipDifficulty","difficulty","Math","round","exp","toFixed","entry","predict","title","replace","contest_id","CODEFORCES_CACHE_ID","getCodeforcesData","toUpperCase","sessionStorage","getItem","text","response","JSON","parse","setItem","result","problems","contestId","toString","index","rating","getData","judge","Problem","problem","state","useContext","useState","isEdit","setEdit","onPropChange","prop","event","slice","stringify","target","value","set","desc","options","showAbbreviation","Card","Body","padding","Title","marginBottom","url","showDifficulty","onClick","promises","push","then","data","Promise","all","results","propName","propValue","icon","faCheck","faEdit","cursor","filter","faTrashAlt","Text","className","width","Form","Control","as","size","onChange","Object","entries","map","placeholder","ProblemList","Button","concat","key","Options","onOptionToggled","option","Check","checked","label","input","document","createElement","addEventListener","file","files","reader","FileReader","onload","Alertify","success","e","error","readAsText","click","blob","Blob","URL","createObjectURL","anchor","download","revokeObjectURL","markdown","line","join","console","log","sort","b","App","Container","marginTop","LOCAL_STORAGE_ID","INITIAL_STATE","ReactDOM","render","children","initialState","window","localStorage","setState","useEffect","Provider","delta","getElementById"],"mappings":"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","file":"static/js/main.d6ac16c3.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/nav';\n\nexport default function AppNavbar() {\n  return (\n    <Navbar id=\"navbar\" fixed='top' variant='dark' expand='lg' style={{ backgroundColor: '#203527' }}>\n      <Navbar.Brand href='#'>CP Problems</Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse id='navbar-nav'>\n        <Nav>\n          <Nav.Link href='#list'>List</Nav.Link>\n          <Nav.Link href='#options'>Options</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}","import React from 'react';\n\nconst StateContext = React.createContext(null);\n\nexport default StateContext;\n","export const Judges = {\n\n  '': {\n    name: 'Not set',\n    abbr: 'N/S'\n  },\n\n  'atcoder': {\n    name: 'AtCoder',\n    abbr: 'AtC'\n  },\n\n  'codeforces': {\n    name: 'Codeforces',\n    abbr: 'CF'\n  }\n\n};","export async function getAtcoderData(problemId, type) {\n  problemId = problemId.toLowerCase();\n\n  if (type === 'difficulty') {\n    // Fetch difficulty from another API.\n    const request = await fetch('https://kenkoooo.com/atcoder/resources/problem-models.json');\n    const api = await request.json();\n\n    // Difficulty smoothing function, taken from kenkoooo/AtCoderProblems.\n    const clipDifficulty = (difficulty) =>\n      Math.round(\n        difficulty >= 400 ? difficulty : 400 / Math.exp(1.0 - difficulty / 400)\n      );\n\n    if (api[problemId]) {\n      return clipDifficulty(api[problemId].difficulty).toFixed();\n    } else {\n      return '-';\n    }\n  } else {\n    const request = await fetch('https://kenkoooo.com/atcoder/resources/merged-problems.json');\n    const api = await request.json();\n\n    for (const entry of api)\n      if (entry.id === problemId) {\n        switch (type) {\n          case 'difficulty':\n            return entry.predict ? entry.predict.toFixed() : '-';\n          case 'name':\n            // Remove the problem index before the title if possible.\n            return entry.title ? entry.title.replace(/^[A-Z]. /, '') : '-';\n          case 'url':\n            return `https://atcoder.jp/contests/${entry.contest_id}/tasks/${entry.id}`;\n          default:\n            return '-';\n        }\n      }\n\n    return '-';\n  }\n}\n","const CODEFORCES_CACHE_ID = 'cp-problems.codeforces-cache';\n\nexport async function getCodeforcesData(problemId, type) {\n  problemId = problemId.toUpperCase();\n\n  let api;\n\n  if (sessionStorage.getItem(CODEFORCES_CACHE_ID) === null) {\n    const request = await fetch('https://codeforces.com/api/problemset.problems');\n    const response = await request.text();\n    api = JSON.parse(response);\n    sessionStorage.setItem(CODEFORCES_CACHE_ID, response);\n  } else {\n    api = JSON.parse(sessionStorage.getItem(CODEFORCES_CACHE_ID));\n  }\n\n  for (const entry of api.result.problems) {\n    if (problemId === entry.contestId.toString() + entry.index) {\n      switch (type) {\n        case 'difficulty':\n          return entry.rating ? entry.rating.toFixed() : '-';\n        case 'name':\n          return entry.name ? entry.name : '-';\n        case 'url':\n          return `https://codeforces.com/problemset/problem/${entry.contestId.toString()}/${entry.index}`;\n        default:\n          return '-';\n      }\n    }\n  }\n\n  return '-';\n}\n","import { getAtcoderData } from './judges/atcoder';\nimport { getCodeforcesData } from './judges/codeforces';\n\nexport async function getData(judge, problemId, type) {\n  if (judge === 'atcoder') {\n    return await getAtcoderData(problemId, type);\n  } else if (judge === 'codeforces') {\n    return await getCodeforcesData(problemId, type);\n  } else {\n    return '-';\n  }\n}\n","import React, { useState, useContext } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport StateContext from './state/state-context';\n\nimport { Judges } from './helper/judges';\nimport { getData } from './helper/get-data';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faCheck, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\nexport default function Problem({ problem, id }) {\n  const state = useContext(StateContext);\n  const [isEdit, setEdit] = useState(problem.judge === '' && problem.problemId === '');\n\n  function onPropChange(prop) {\n    return (event) => {\n      const problems = state.problems.slice();\n      // Clone problem\n      const problem = JSON.parse(JSON.stringify(problems[id]));\n      problem[prop] = event.target.value;\n      problems[id] = problem;\n\n      state.set({ problems });\n    }\n  }\n\n  function toggleEdit() {\n    if (isEdit && problem.judge && problem.problemId) {\n      // Auto fetch required data\n      const promises = [];\n\n      if (problem.name === '') {\n        promises.push(\n          getData(problem.judge, problem.problemId, 'name').then((data) => ['name', data])\n        );\n      }\n\n      if (problem.url === '') {\n        promises.push(\n          getData(problem.judge, problem.problemId, 'url').then((data) => ['url', data])\n        );\n      }\n\n      if (problem.difficulty === '') {\n        promises.push(\n          getData(problem.judge, problem.problemId, 'difficulty').then((data) => ['difficulty', data])\n        );\n      }\n\n      Promise.all(promises).then((results) => {\n        const problems = state.problems.slice();\n        const problem = problems[id];\n\n        for (const [propName, propValue] of results) {\n          problem[propName] = propValue;\n        }\n\n        problems[id] = problem;\n        state.set({ problems });\n      });\n    }\n\n    setEdit(!isEdit);\n  }\n\n  function deleteProblem(event) {\n    const problems = state.problems.filter((problem, index) => index !== id);\n\n    state.set({ problems });\n  }\n\n  const desc = (\n    <>\n      {\n        state.options.showAbbreviation\n          ? Judges[problem.judge].abbr\n          : Judges[problem.judge].name\n      }\n      &nbsp;\n      {problem.problemId}\n      {problem.name !== '' && problem.name !== '-' ? ' - ' + problem.name : ''}\n    </>\n  )\n\n  return (\n    <Card>\n      <Card.Body style={{ padding: '8px 20px' }}>\n        <Card.Title style={{ marginBottom: isEdit ? '12px' : '0px' }}>\n          {problem.url !== '' && problem.url !== '-'\n            ?\n            <a href={problem.url}>\n              {desc}\n            </a>\n            :\n            desc}&nbsp;\n          {state.options.showDifficulty\n            && problem.difficulty !== ''\n            && problem.difficulty !== '-'\n            ? `(${problem.difficulty}) `\n            : ''}\n          <FontAwesomeIcon\n            onClick={toggleEdit}\n            icon={!isEdit ? faEdit : faCheck}\n            style={{ cursor: 'pointer' }} />&nbsp;\n          <FontAwesomeIcon\n            onClick={deleteProblem}\n            icon={faTrashAlt}\n            style={{ cursor: 'pointer' }} />\n        </Card.Title>\n\n        {isEdit && <Card.Text>\n          <table className='w-100'>\n            <tr>\n              <td style={{ width: '100px' }}><b>Judge:</b></td>\n              <td>\n                <Form.Control\n                  as='select'\n                  size='sm'\n                  value={problem.judge}\n                  onChange={onPropChange('judge')}>\n                  {Object.entries(Judges).map(([id, judge]) => (\n                    <option value={id}>{judge.abbr} - {judge.name}</option>\n                  ))}\n                </Form.Control>\n              </td>\n            </tr>\n            <tr>\n              <td style={{ width: '100px' }}><b>Problem ID:</b></td>\n              <td>\n                <Form.Control\n                  size='sm'\n                  value={problem.problemId}\n                  onChange={onPropChange('problemId')} />\n              </td>\n            </tr>\n            <tr>\n              <td style={{ width: '100px' }}><b>Name:</b></td>\n              <td>\n                <Form.Control\n                  size='sm'\n                  value={problem.name}\n                  placeholder='Leave this field blank to fetch automatically.'\n                  onChange={onPropChange('name')} />\n              </td>\n            </tr>\n            <tr>\n              <td style={{ width: '100px' }}><b>URL:</b></td>\n              <td>\n                <Form.Control\n                  size='sm'\n                  value={problem.url}\n                  placeholder='Leave this field blank to fetch automatically.'\n                  onChange={onPropChange('url')} />\n              </td>\n            </tr>\n            <tr>\n              <td style={{ width: '100px' }}><b>Difficulty:</b></td>\n              <td>\n                <Form.Control\n                  size='sm'\n                  value={problem.difficulty}\n                  placeholder='Leave this field blank to fetch automatically.'\n                  onChange={onPropChange('difficulty')} />\n              </td>\n            </tr>\n          </table>\n        </Card.Text>}\n      </Card.Body>\n    </Card>\n  );\n}","import React, { useState, useContext } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport StateContext from './state/state-context';\n\nimport Problem from './Problem';\n\nexport default function ProblemList() {\n  const state = useContext(StateContext);\n\n  function addProblem() {\n    state.set({ problems: state.problems.concat({ judge: '', problemId: '', name: '', url: '', difficulty: '' }) });\n  }\n\n  return (\n    <>\n      <Button variant='dark' onClick={addProblem} style={{ marginBottom: '8px' }}>\n        Add Problem\n      </Button>\n\n      {state.problems.map((problem, id) => (\n        <Problem problem={problem} id={id} key={id} />\n      ))}\n    </>\n  );\n}","import React, { useContext } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport StateContext from './state/state-context';\n\nimport Alertify from 'alertifyjs/build/alertify.min.js';\nimport { Judges } from './helper/judges';\n\nexport default function Options() {\n  const state = useContext(StateContext);\n\n  function importData() {\n    const input = document.createElement('input');\n    input.type = 'file';\n\n    input.addEventListener('change', () => {\n      const file = input.files[0];\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        try {\n          const data = JSON.parse(reader.result);\n          state.set({ problems: data });\n          Alertify.success('Imported data from file.');\n        } catch (e) {\n          Alertify.error('Cannot read the file chosen.');\n        }\n      };\n\n      reader.readAsText(file);\n    });\n\n    input.click();\n  }\n\n  function exportData() {\n    const json = JSON.stringify(state.problems);\n    const blob = new Blob([json], { type: 'octet/stream' });\n    const url = URL.createObjectURL(blob);\n\n    const anchor = document.createElement('a');\n    anchor.href = url;\n    anchor.download = 'problems.json';\n    anchor.click();\n\n    URL.revokeObjectURL(url);\n  }\n\n  function exportMarkdown() {\n    const problems = state.problems.slice();\n    const markdown = problems\n      .map((problem) => {\n        let line = '';\n\n        line += `- [`;\n\n        line += state.options.showAbbreviation\n          ? Judges[problem.judge].abbr\n          : Judges[problem.judge].name;\n\n        line += ` ${problem.problemId}`;\n        if (state.options.showDifficulty && problem.name !== '' && problem.difficulty !== '-')\n          line += ` - ${problem.name}`;\n        if (problem.difficulty !== '' && problem.difficulty !== '-')\n          line += ` (${problem.difficulty})`;\n        line += ']';\n        line += `(${problem.url})`;\n\n        return line;\n      })\n      .join('\\n') + '\\n';\n    console.log(markdown);\n  }\n\n  function sortProblems() {\n    const problems = state.problems.slice();\n    problems.sort((a, b) => {\n      if (a.judge !== b.judge) {\n        return a.judge > b.judge;\n      } else if (a.problemId !== b.problemId) {\n        return a.problemId > b.problemId;\n      } else {\n        return 0;\n      }\n    });\n\n    state.set({ problems });\n  }\n\n  function clearAllData() {\n    state.set({ problems: [] });\n  }\n\n  function onOptionToggled(option) {\n    return (event) => {\n      const options = { ...state.options };\n      options[option] = !options[option];\n      state.set({ options });\n    };\n  };\n\n  return (\n    <>\n      <Form.Check\n        checked={state.options.showDifficulty ? 'checked' : ''}\n        onChange={onOptionToggled('showDifficulty')}\n        label='Show Difficulty' />\n      <Form.Check\n        checked={state.options.showAbbreviation ? 'checked' : ''}\n        onChange={onOptionToggled('showAbbreviation')}\n        label='Show Abbreviations of Judge' />\n      <Button variant='dark' onClick={importData}>Import Data (Override)</Button>&nbsp;\n      <Button variant='dark' onClick={exportData}>Export Data</Button>&nbsp;\n      <Button variant='dark' onClick={exportMarkdown}>Export Markdown</Button>&nbsp;\n      <Button variant='dark' onClick={sortProblems}>Sort Problems</Button>&nbsp;\n      <Button variant='dark' onClick={clearAllData}>Clear All Data</Button>\n    </>\n  );\n}","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from './Navbar';\nimport ProblemList from './ProblemList';\nimport Options from './Options';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Navbar />\n      <Container style={{ marginTop: '70px' }}>\n        <h2>\n          <a id='list'></a>\n          Problems List\n        </h2>\n        <ProblemList />\n\n        <hr />\n\n        <h2>\n          <a id='options'></a>\n          Options\n        </h2>\n        <Options />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport StateContext from './state-context';\n\nconst LOCAL_STORAGE_ID = 'cp-problems.app-state';\nconst INITIAL_STATE = {\n  problems: [],\n  options: {\n    showDifficulty: true,\n    showAbbreviation: true,\n  },\n};\n\nexport default function StateProvider({ children }) {\n  const initialState =\n    JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_ID)) || INITIAL_STATE;\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    window.localStorage.setItem(LOCAL_STORAGE_ID, JSON.stringify(state))\n  }, [state]);\n\n  function partialSetState(delta) {\n    setState({ ...state, ...delta });\n  }\n\n  return (\n    <StateContext.Provider value={{ ...state, set: partialSetState }}>\n      {children}\n    </StateContext.Provider>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport StateProvider from './state/state-provider';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'alertifyjs/build/css/alertify.min.css';\nimport 'alertifyjs/build/css/themes/bootstrap.min.css';\n\nReactDOM.render(\n  (\n    <StateProvider>\n      <App />\n    </StateProvider>\n  ),\n  document.getElementById('root')\n);"],"sourceRoot":""}